# Allow everything but "meta".
*			/	rw,alldirs,admin,maproot=0:0

# Allow "meta".
*			.	rw

# Line format:
#  [ip range] [path] [options]
# ip range:
#  * = any ip (same as 0.0.0.0/0)
#  A.B.C.D = single ip address
#  A.B.C.D-E.F.G.H = range of ip addresses
#  A.B.C.D/XX = A.B.C.D network with XX bits netmask
#  A.B.C.D/E.F.G.H = A.B.C.D network with E.F.G.H netmask
# path:
#  . = special 'path' that means 'meta'
#  /... = path in mfs structure
# options:
#  ro/rw/readonly/readwrite = meaning is obvious
#  alldirs = any subdirectory can be mounted as root
#  dynamicip = ip is tested only during first authentication, then client can use the same session id from any ip
#  ignoregid = group id (gid) is not tested - important when you want to use auxiliary groups
#  admin = administrative privileges - changing quotas, storage classes, patterns and special flags in files, for details see man page
#  maproot=UID[:GID] = treat all root (uid zero) operations as operations done by user with uid equal to UID and gid equal to GID (or default gid of this user if GID not specified)
#  mapall=UID[:GID} = like above but for all operations (for both options UID and/or GID can be specified as username or groupname existing on master machine)
#  umask=0### = this umask is added (OR) to user's umask and the resulting umask is used in this mount point
#  sclassgroups=-|N[:N[:...]] = if this option is not defined, any storage class can be set by user in this mount point, if it is defined, only storage classes belonging to listed groups can be set; to define no groups (user cannot set any storage class) use '-' (minus) sign; for explanation on how to add a storage class to a group see manual page for mfsscadmin(1)
#  password=TEXT = force authentication using given password
#  md5pass=MD5 = like above, but with password defined as it's MD5 hash (MD5 specified as 128-bit hexadecimal number)
#  minversion=VER = allow only clients with version number equal or greater than VER (VER can be specified as X or X.Y or X.Y.Z)
#  mintrashretention=TIMEDURATION = do not allow to set trashretention below TIMEDURATION (TIMEDURATION can be specified as number of seconds or combination of elements #W,#D,#H in set order)
#  maxtrashretention=TIMEDURATION = do not allow to set trashretention above TIMEDURATION (TIMEDURATION can be specified as above)
#  disable=OPERATION[:OPERATION[:...]] = do not allow the client to perform certain operations, operations can be specified as one parameter delimited with colon (:) or as single operations with disable option repeated many times
#
# Operations for disable:
#  chown - don't allow the client to perform the chown operation
#  chmod - don't allow the client to perform the chmod operation
#  symlink - don't allow the client to create symbolic links
#  mkfifo - don't allow the client to create FIFOs
#  mkdev - don't allow the client to create devices
#  mksock - don't allow the client to create sockets
#  mkdir - don't allow the client to create directories
#  unlink - don't allow the client to remove non directory objects (will also deny move/rename operation if target inode already exists!)
#  rmdir - don't allow the client to remove directories (will also deny move/rename operation if target inode already exists!)
#  rename - don't allow the client to change inodes (files, directories) names
#  move - don't allow the client to move inodes (files, directories) to another path
#  link - don't allow the client to create hard links
#  create - don't allow the client to create new files
#  readdir - don't allow the client to list directories ('ls' command will not work)
#  read - don't allow the client to read from files
#  write - don't allow the client to write to files
#  truncate - don't allow the client to shorten the length of a file with truncate command
#  setlength - don't allow the client to increase the length of a file with truncate command
#  appendchunks - don't allow the client to add chunks from one file to another (mfsappendchunks)
#  snapshot - don't allow the client to create snapshots
#  settrash - don't allow the client to change trash retention time
#  setsclass - don't allow the client to set storage classes
#  seteattr - don't allow the client to set mfs extra attributes
#  setxattr - don't allow the client to set XATTRs
#  setfacl - don't allow the client to set ACLs
#
# Defaults:
#  readonly,maproot=999:999,umask=0000,mintrashretention=0,maxtrashretention=4294967295
# Note! Default value for maxtrashretention is impossible to be set by user, so if the value is not set, then it can be considered close to infinity, but if it is set, then the maximum is 65535 hours (~390 weeks).
# Default value for sclassgroups is to allow all
#
# TIMEDURATION examples:
#  2H = 2 hours
#  1d12h = 36 hours
#  48H = 48 hours = 2 days 
#  12w = 12 weeks
#  2w6d = 20 days

# Some examples:

#  Users from any IP can mount root directory as a read-only file system. Local roots are mapped as users with uid:gid = 999:999.
#*			/	ro

#  Users from IP 192.168.1.0-192.168.1.255 can mount root directory as a standard read/write file system. Local roots are mapped as users with uid:gid = 999:999.
#192.168.1.0/24		/	rw

#  Users from IP 192.168.1.0-192.168.1.255 when give password 'passcode' can mount any subdirectory as a standard read/write file system. Local roots are left unmapped.
#192.168.1.0/24		/	rw,alldirs,maproot=0,password=passcode

#  Users from IP 10.0.0.0-10.0.0.5 when give password 'test' can mount 'test' subdirectory as a standard read/write file system. Local roots are mapped as 'nobody' users (usually uid=65534).
#10.0.0.0-10.0.0.5	/test	rw,maproot=nobody,password=test

#  Users from IP 10.1.0.0-10.1.255.255 can mount 'public' subdirectory as a standard read/write file system. All users are mapped as users with uid:gid = 1000:1000.
#10.1.0.0/255.255.0.0	/public	rw,mapall=1000:1000

#  Users from IP 10.2.0.0-10.2.255.255 can mount everything, but can't decrease trash retention below 36 hours nor increse it above 2 weeks
#10.2.0.0/16		/	rw,alldirs,maproot=0,mintrashretention=1d12h,maxtrashretention=2w

#  Users from IP 192.168.1.0-192.168.1.255 can mount root directory as a read/write file system, but with no possibility of removing any data. Local roots are mapped as users with uid:gid = 999:999.
#192.168.1.0/24		/	rw,disable=unlink:rmdir:truncate

#  Same as above, just in different format
#192.168.1.0/24		/	rw,disable=unlink,disable=rmdir,disable=truncate
